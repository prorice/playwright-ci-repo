name: Production

on:
  push:
    branches:
      - master

env:
  CACHED_DEPENDENCY_PATHS: ${{ github.workspace }}/node_modules
  AWS_EB_S3_BUCKET: elasticbeanstalk-ap-northeast-2-${{ secrets.AWS_ACCOUNT_ID }}
  PREFIX_NAME: backoffice

jobs:
  release:
    runs-on: ubuntu-latest
    outputs:
      deploy_version: ${{ steps.set_outputs.outputs.deploy_version }}

    steps:
    - uses: actions/checkout@v3
      with:
        persist-credentials: false

    - uses: actions/setup-node@v3
      with:
        node-version: 16.x
        registry-url: https://npm.pkg.github.com
        scope: '@tportio'

    - name: Create .npmrc
      run: |
        echo '//npm.pkg.github.com/:_authToken=${{ secrets.NPM_REPO_AUTH_TOKEN }}' >> .npmrc
        echo '@tportio:registry=https://npm.pkg.github.com/' >> .npmrc

    - name: Cache node modules
      id: cache-npm
      uses: actions/cache@v3
      env:
        cache-name: cache-node-modules
      with:
        path: ${{env.CACHED_DEPENDENCY_PATHS}}
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}

    - if: steps.cache-npm.outputs.cache-hit != 'true'
      run: npm ci

    - run: npm run build:prod

    - name: npx Semantic Release
      run: npx semantic-release

    - name: Version Check
      if: ${{ !env.RELEASE_VERSION }}
      run: exit 1

    - name: Release Version
      run: |
        echo "$RELEASE_VERSION"
        echo "DEPLOY_VERSION=$PREFIX_NAME-v$RELEASE_VERSION" >> $GITHUB_ENV

    - name: Deploy Version
      run: echo "$DEPLOY_VERSION"

    - name: Set Outputs
      id: set_outputs
      run: |
        echo "::set-output name=deploy_version::$DEPLOY_VERSION"

    - name: Fetch Release Tags
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        clean: false

    - name: Create Source Bundle
      run: |
        git archive --format=zip v$RELEASE_VERSION -o $DEPLOY_VERSION.zip
        zip -urq $DEPLOY_VERSION.zip dist

    # 서버가 생성되면 설정값 변경후 주석 해제 하겠습니다.
    # - name: Configure AWS Credentials
    #   uses: aws-actions/configure-aws-credentials@v1
    #   with:
    #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #     aws-region: ap-northeast-2

    # - name: Upload Source Bundle
    #   run: aws s3 cp $DEPLOY_VERSION.zip s3://$AWS_EB_S3_BUCKET/DAPI/$DEPLOY_VERSION.zip
    # - name: Create Application Version
    #   env:
    #     COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
    #   run: aws elasticbeanstalk create-application-version --application-name DAPI --version-label $DEPLOY_VERSION --description "$COMMIT_MESSAGE" --source-bundle S3Bucket="$AWS_EB_S3_BUCKET",S3Key="DAPI/$DEPLOY_VERSION.zip"

  deploy:
    runs-on: ubuntu-latest
    needs: release

    steps:
    - name: Set Release Version Environments
      run: |
        echo "DEPLOY_VERSION=${{ needs.release.outputs.deploy_version }}" >> $GITHUB_ENV

    - name: Environment
      run: |
        echo "APP_VERSION='$DEPLOY_VERSION'" >> $GITHUB_ENV

      # 추후 dev 서버가 완성되면  IAM 유저 설정 후 key 등록 한 다음 주석 해제 하도록 하겠습니다.
      # # Upload to S3
      # - name: sync s3
      #   uses: jakejarvis/s3-sync-action@master
      #   with:
      #     args: --exclude '.git*/*' --delete --follow-symlinks
      #   env:
      #     SOURCE_DIR: ./dist
      #     AWS_REGION: ${{ secrets.AWS_REGION }}
      #     AWS_S3_BUCKET:
      #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_DEV_ACCESS_KEY_ID }}
      #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_DEV_SECRET_ACCESS_KEY }}

      # # Invalidate Cloudfront (this action)
      # - name: invalidate cloudfront
      #   uses: chetan/invalidate-cloudfront-action@master
      #   env:
      #     DISTRIBUTION:
      #     PATHS: "/*"
      #     AWS_REGION: ${{ secrets.AWS_REGION }}
      #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_DEV_ACCESS_KEY_ID }}
      #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_DEV_SECRET_ACCESS_KEY }}
